{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/you-dont-know-git/","result":{"data":{"site":{"siteMetadata":{"title":"Phil Baker"}},"markdownRemark":{"id":"28b08bbd-4ba5-564d-b969-0758967ecae3","excerpt":"I know my way around Git but for anything more than the basics I’ll end up googling solutions. Jason’s talk packed in so much Git wisdom and gave me a few ‘mind…","html":"<p>I know my way around Git but for anything more than the basics I’ll end up googling solutions. Jason’s talk packed in so much Git wisdom and gave me a few ‘mind blown’ moments. My main takeaway was that you can really improve your Git workflow by learning around 15 commands.</p>\n<h3>Part 1 - Unfamiliar Commands</h3>\n<p><code class=\"language-text\">git add -p</code> opens interactive prompt that allows you to go through each of your changes incrementally.</p>\n<p>Don’t rush to <code class=\"language-text\">git add .</code>. Pick up good habits and run through things step by step.</p>\n<p><code class=\"language-text\">git stash</code> is not recommended for continual workflow but useful if you want to quickly wipe the slate clean.</p>\n<p><code class=\"language-text\">git push origin master:newbranch</code> is a quick way to create another branch.</p>\n<p><code class=\"language-text\">git log</code> shows git history</p>\n<p><code class=\"language-text\">git rebase -i</code> allows you to rework commits by combining, renaming or deleting them. This command affects git history, so do it before you share a branch.</p>\n<p><code class=\"language-text\">git cherry-pick</code> can take one or two commits from one branch and move them to another. This command affects git history.</p>\n<p><code class=\"language-text\">git bisect</code> helps us narrow down out where a bug was introduced into a codebase. Can be a big time saver over a more manual approach.</p>\n<h3>Part 2 - Common workflows</h3>\n<p>git flow - A branching model to improve parellel development experience. Possibly too complicated.</p>\n<p>github flow - A lightweight alternative with feature branches and a long running master branch. It fits more with continuous deployment and cuts down on big merge problems.</p>\n<h3>Part 3 - Helpful shorthands</h3>\n<p><code class=\"language-text\">git log --oneline -1 HEAD</code> logs the latest commit.</p>\n<p><code class=\"language-text\">git log --oneline -1 HEAD~1</code> shows one commit before the last.</p>\n<p><code class=\"language-text\">git push origin HEAD</code> will always push top most commit to the right location.</p>\n<p><code class=\"language-text\">git checkout -</code> switchs to last used branch.</p>\n<h4>Aliases</h4>\n<p><code class=\"language-text\">git status</code> is worth aliasing considering how much it’s used. Don’t alias all of the git core commands though - use tab completion instead. Aliases can prevent you from learning the commands you are using and what they are doing.</p>\n<p>Use a git prompt.</p>\n<h3>Links</h3>\n<p><a href=\"https://gettinggit.com/\">Getting Git</a> - Jason’s Git course.</p>","frontmatter":{"title":"You don't know Git - Jason McCreary - Laracon Online","date":"09 March 2017","description":"Notes from Jason McCreary's Laracon online talk - you don't know Git"}}},"pageContext":{"slug":"/blog/you-dont-know-git/","previous":{"fields":{"slug":"/blog/javascript30/"},"frontmatter":{"title":"JavaScript30"}},"next":{"fields":{"slug":"/blog/changing-a-select-value-programmatically/"},"frontmatter":{"title":"Changing a select value programmatically"}}}}}