<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Phil Baker]]></title><description><![CDATA[Phil Baker - Front-end developer in the UK]]></description><link>https://philbaker.dev</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 04 Aug 2020 18:42:01 GMT</lastBuildDate><item><title><![CDATA[Changing a select value programmatically]]></title><description><![CDATA[I ran into an issue recently where I needed an E2E test to choose an option from a select element and submit a form. This seems like a…]]></description><link>https://philbaker.dev/blog/changing-a-select-value-programmatically/</link><guid isPermaLink="false">https://philbaker.dev/blog/changing-a-select-value-programmatically/</guid><pubDate>Fri, 18 Jan 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I ran into an issue recently where I needed an E2E test to choose an option from a select element and submit a form. This seems like a fairly easy thing to do but changing the the selected item with JavaScript did not work. &lt;/p&gt;
&lt;p&gt;It turns out that the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event&quot;&gt;change event&lt;/a&gt; needs to be dispatched after the value is changed. &lt;a href=&quot;https://codepen.io/philbaker/pen/RwNeemw&quot;&gt;Here’s an example&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[You don't know Git - Jason McCreary - Laracon Online]]></title><description><![CDATA[I know my way around Git but for anything more than the basics I’ll end up googling solutions. Jason’s talk packed in so much Git wisdom and…]]></description><link>https://philbaker.dev/blog/you-dont-know-git/</link><guid isPermaLink="false">https://philbaker.dev/blog/you-dont-know-git/</guid><pubDate>Thu, 09 Mar 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I know my way around Git but for anything more than the basics I’ll end up googling solutions. Jason’s talk packed in so much Git wisdom and gave me a few ‘mind blown’ moments. My main takeaway was that you can really improve your Git workflow by learning around 15 commands.&lt;/p&gt;
&lt;h3&gt;Part 1 - Unfamiliar Commands&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git add -p&lt;/code&gt; opens interactive prompt that allows you to go through each of your changes incrementally.&lt;/p&gt;
&lt;p&gt;Don’t rush to &lt;code class=&quot;language-text&quot;&gt;git add .&lt;/code&gt;. Pick up good habits and run through things step by step.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git stash&lt;/code&gt; is not recommended for continual workflow but useful if you want to quickly wipe the slate clean.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git push origin master:newbranch&lt;/code&gt; is a quick way to create another branch.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git log&lt;/code&gt; shows git history&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git rebase -i&lt;/code&gt; allows you to rework commits by combining, renaming or deleting them. This command affects git history, so do it before you share a branch.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git cherry-pick&lt;/code&gt; can take one or two commits from one branch and move them to another. This command affects git history.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git bisect&lt;/code&gt; helps us narrow down out where a bug was introduced into a codebase. Can be a big time saver over a more manual approach.&lt;/p&gt;
&lt;h3&gt;Part 2 - Common workflows&lt;/h3&gt;
&lt;p&gt;git flow - A branching model to improve parellel development experience. Possibly too complicated.&lt;/p&gt;
&lt;p&gt;github flow - A lightweight alternative with feature branches and a long running master branch. It fits more with continuous deployment and cuts down on big merge problems.&lt;/p&gt;
&lt;h3&gt;Part 3 - Helpful shorthands&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git log --oneline -1 HEAD&lt;/code&gt; logs the latest commit.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git log --oneline -1 HEAD~1&lt;/code&gt; shows one commit before the last.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git push origin HEAD&lt;/code&gt; will always push top most commit to the right location.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git checkout -&lt;/code&gt; switchs to last used branch.&lt;/p&gt;
&lt;h4&gt;Aliases&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;git status&lt;/code&gt; is worth aliasing considering how much it’s used. Don’t alias all of the git core commands though - use tab completion instead. Aliases can prevent you from learning the commands you are using and what they are doing.&lt;/p&gt;
&lt;p&gt;Use a git prompt.&lt;/p&gt;
&lt;h3&gt;Links&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://gettinggit.com/&quot;&gt;Getting Git&lt;/a&gt; - Jason’s Git course.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[JavaScript30]]></title><description><![CDATA[JavaScript30 is a fun series of tutorials. It introduced me to modern JavaScript after a couple of years of over-relying on jQuery. Day…]]></description><link>https://philbaker.dev/blog/javascript30/</link><guid isPermaLink="false">https://philbaker.dev/blog/javascript30/</guid><pubDate>Tue, 14 Feb 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://javascript30.com/&quot;&gt;JavaScript30&lt;/a&gt; is a fun series of tutorials. It introduced me to modern JavaScript after a couple of years of over-relying on jQuery.&lt;/p&gt;
&lt;h2&gt;Day 1: Drum kit&lt;/h2&gt;
&lt;p&gt;The goal for day one was to make a drum kit that responds to the keydown event. It was a simple introduction to vanilla JavaScript but there were a few takeaways for me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Focus on data attributes rather than hooking onto CSS class names or ids.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;element.classList.add(&amp;#39;class&amp;#39;)&lt;/code&gt; is equivalent to the jQuery: &lt;code class=&quot;language-text&quot;&gt;$(&amp;#39;element&amp;#39;).addClass(&amp;#39;class&amp;#39;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;There’s a handy &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/transitionend&quot;&gt;transitionend&lt;/a&gt; event that fires as soon as a CSS transition ends. This means the CSS can transition length can be changed without the JavaScript going out of sync.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My latest progress is on &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/01%20-%20JavaScript%20Drum%20Kit&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 2: CSS and JS clock&lt;/h2&gt;
&lt;p&gt;Today’s task was to make the clock show the correct time. I actually found the CSS part most interesting and discovered a couple of things that I didn’t know there:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;transform-origin&lt;/code&gt; is used with CSS transforms and allows you to change the point of origin of a transform. By default it is set to 50%.&lt;/li&gt;
&lt;li&gt;There’s a cubic bezier editor in Chrome dev tools that allows you to play around with transitions! You can access it by clicking the purple icon next to the transition name.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My latest progress is on &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/02%20-%20JS%20%2B%20CSS%20Clock&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 3: CSS Variables&lt;/h2&gt;
&lt;p&gt;The third challenge was to use JavaScript to change the value of CSS Variables creating a spacing, blur and colour mixer in the process.&lt;/p&gt;
&lt;p&gt;So far I’ve learnt more about modern CSS than JavaScript! I’ve generally stayed away from CSS variables and stuck with Sass but it’s nice seeing the benefits of using the real thing. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;querySelectorAll&lt;/code&gt; returns a node list rather than an array. There are fewer methods you can use on a node list than an array.  &lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;forEach()&lt;/code&gt; has recently been added to node lists. In order to work with other methods you can convert a node list to an array.  &lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;dataset&lt;/code&gt; is an object that will contain all of the data elements from the element you are targeting  &lt;/li&gt;
&lt;li&gt;CSS variables can be updated with JavaScript.&lt;/li&gt;
&lt;li&gt;CSS variables can be scoped e.g. &lt;code class=&quot;language-text&quot;&gt;--base: #000;&lt;/code&gt; on the html tag will be overwritten by &lt;code class=&quot;language-text&quot;&gt;--base: #3A3A3A;&lt;/code&gt; on the body tag.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My latest progress is on &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/03%20-%20CSS%20Variables&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 4: Array cardio part 1&lt;/h2&gt;
&lt;p&gt;The first day of pure JavaScript exercises focused on working with Arrays and there were plenty of lessons learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Array.prototype.map takes in an array and returns a new array of the same length.&lt;/li&gt;
&lt;li&gt;map will always return the same number of items you give it (as opposed to filter which can return as little as you like).&lt;/li&gt;
&lt;li&gt;querySelectorAll can be called on any element - not just document.&lt;/li&gt;
&lt;li&gt;map is not available on a NodeList. A node list can be converted to an array in two ways:&lt;/li&gt;
&lt;li&gt;Wrap in Array.from() e.g. &lt;code class=&quot;language-text&quot;&gt;Array.from(category.querySelectorAll(&amp;#39;a&amp;#39;));&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use an ES6 spread e.g. &lt;code class=&quot;language-text&quot;&gt;[...category.querySelectorAll(&amp;#39;a&amp;#39;)];&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A theme that is emerging over this course is the usefulness of ES6. Template literals, while seemingly a slight change, are a joy to work with. &lt;/p&gt;
&lt;p&gt;This video highlighted the benefits of arrow functions and how much more readable ES6 can be:&lt;/p&gt;
&lt;h4&gt;The old way&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fifteen &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; inventors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;inventor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;inventor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;year &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1500&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; inventor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;year &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1600&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;ES6&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fifteen &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; inventors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;inventor&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;inventor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;year &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1500&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; inventor&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;year &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1600&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My latest progress is on &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/04%20-%20Array%20Cardio%20Day%201&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 5: Flexbox image gallery&lt;/h2&gt;
&lt;p&gt;This lesson reinforced the value of Flexbox to me. It’s something I’d like to use a lot more of on future projects.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An element in CSS can be a flex item as well as a flex container.&lt;/li&gt;
&lt;li&gt;CSS transitions can be used to animate flex-grow.&lt;/li&gt;
&lt;li&gt;Using flex-grow means there is no need to specify a width.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My latest progress is on &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/05%20-%20Flex%20Panel%20Gallery&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 6: Ajax type-ahead&lt;/h2&gt;
&lt;p&gt;Challenge six was to build a search of places with autocomplete and highlighting. The fetch API and promises got their first usage. It’s great to see these kind of affects achieved without relying on a third-party library!&lt;/p&gt;
&lt;p&gt;My latest progress is on &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/06%20-%20Type%20Ahead&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 7: Array cardio part 2&lt;/h2&gt;
&lt;p&gt;Another exercise looking at JavaScript’s array methods. I’m finding refactoring ES5 to ES6 to be a really effective way of learning the new syntax. It’s impressive how many things can become a one-liners.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The array method &lt;code class=&quot;language-text&quot;&gt;Array.prototype.some()&lt;/code&gt; will check if at least one thing in the array meets what you’re looking for.&lt;/li&gt;
&lt;li&gt;Chrome dev tools -  wrapping a variable in curly braces inside &lt;code class=&quot;language-text&quot;&gt;console.log&lt;/code&gt; shows the name of the variable as well as its value.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Array.prototype.find()&lt;/code&gt; returns the first item it finds.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; My latest progress is on &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/07%20-%20Array%20Cardio%20Day%202&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Day 8: Canvas&lt;/h2&gt;
&lt;p&gt;Today’s creation was an MS paint-like drawing board using HTML5 canvas. I don’t usually build this kind of thing but it was lots of fun. It’s given me some ideas for some more creative side-projects.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES6 allows you to declare multiple variables and their values on one line (by destructuring an array) e.g. &lt;code class=&quot;language-text&quot;&gt;[lastX, lastY] = [e.offsetX, e.offsetY];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;HSL is good colour notation  manipulate with JavaScript - see &lt;a href=&quot;http://mothereffinghsl.com/&quot;&gt;mother-effing hsl&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The source is on &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/08%20-%20Fun%20with%20HTML5%20Canvas&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 9: Dev tool tricks&lt;/h2&gt;
&lt;p&gt;This was a really useful overview of the Chrome developer tools and how they can help with JavaScript.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setting a breakpoint: Right click an element in the elements panel &gt; &lt;code class=&quot;language-text&quot;&gt;Break on&lt;/code&gt; &gt; &lt;code class=&quot;language-text&quot;&gt;Attributes modification&lt;/code&gt;. With this option selected, as soon as an attribute (e.g. colour or font size) changes, it will will pause the debugger and JavaScript causing the change..&lt;/li&gt;
&lt;li&gt;Interpolation with &lt;code class=&quot;language-text&quot;&gt;%s&lt;/code&gt; - I’d seen this in Python before and never realised it could be used in JS. It’s maybe not that useful now that we have template literals in ES6.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;console.dir()&lt;/code&gt; shows a dropdown with properties and methods availble on an element whereas &lt;code class=&quot;language-text&quot;&gt;console.log()&lt;/code&gt; will just show the element itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The source is on &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/09%20-%20Dev%20Tools%20Domination&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 10: Checklist&lt;/h2&gt;
&lt;p&gt;Today’s challenge was to add Gmail like functionality to a checklist - if you select one box and then shift-click another it should check the boxes in between.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I’ve always used for loops for similar tasks but Wes’s use of &lt;code class=&quot;language-text&quot;&gt;forEach&lt;/code&gt; is much easier to read.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;MouseEvent.shiftKey&lt;/code&gt; tells you if the shift key was pressed when an event occurs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The source is on &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/10%20-%20Hold%20Shift%20and%20Check%20Checkboxes&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 11: Video player&lt;/h2&gt;
&lt;p&gt;Today’s task was to implement custom controls on an HTML5 video player and add a full screen toggle button.&lt;/p&gt;
&lt;p&gt;Working with &lt;code class=&quot;language-text&quot;&gt;play&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;pause&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;timeupdate&lt;/code&gt; events meant a lot could be achieved with little code.
The source is on &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/11%20-%20Custom%20Video%20Player&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 12: Key sequence detection&lt;/h2&gt;
&lt;p&gt;Today’s exercise allows the user to unlock something by entering a specific key sequence. &lt;/p&gt;
&lt;p&gt;This works by using the &lt;code class=&quot;language-text&quot;&gt;keyup&lt;/code&gt; event listener, storing pressed keys in an array and using &lt;code class=&quot;language-text&quot;&gt;Array.prototype.includes()&lt;/code&gt; to check if it matches a secret code (a string stored in a variable).&lt;/p&gt;
&lt;p&gt;The source is on &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/12%20-%20Key%20Sequence%20Detection&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;The secret code may be a mythical animal with a horn on it’s head…&lt;/small&gt;&lt;/p&gt;
&lt;h2&gt;Day 13: Slide in on scroll&lt;/h2&gt;
&lt;p&gt;Ah scroll events. Not great for performance but people seem to like them! Today’s challenge was to animate images into place as the page is scrolled down. There’s a bit of maths based on screen position and image position but with some logging to console it soon makes sense.&lt;/p&gt;
&lt;p&gt;One new thing I learnt about was &lt;code class=&quot;language-text&quot;&gt;console.count()&lt;/code&gt; which can be used to log the number of times an event is fired. Quite useful to demonstrate the importance of debouncing scroll events!&lt;/p&gt;
&lt;p&gt;The source is on &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/13%20-%20Slide%20in%20on%20Scroll&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 14: Objects and arrays - reference vs copy&lt;/h2&gt;
&lt;p&gt;Updating a reference to an array/object will update the values in the original array/object. A way around this is to make a copy - there are a few of ways to do this:&lt;/p&gt;
&lt;h4&gt;Make a copy of an array&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Array.prototype.slice()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;[].concat(array)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;[...arrayName]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Array.from(array)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Make a copy of an object&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Object.assign({}, obj);&lt;/code&gt; - This will only clone the object one level deep.&lt;/li&gt;
&lt;li&gt;There is a proposal for an object spread operator but it is not yet implemented.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The file for this exercise is on &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/14%20-%20JavaScript%20References%20VS%20Copying&quot;&gt;github&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;Day 15: Local storage and event delegation&lt;/h2&gt;
&lt;p&gt;Today’s goal was to persist the state of a todo list using local storage.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘Preserve log’ in Chrome’s console is handy. It keeps messages that may flash on the screen too quickly and lets you know if the page has been refreshed/changed.&lt;/li&gt;
&lt;li&gt;Event delegation is where you listen for events an element that will exist at page load. It is useful because the element can pass events to future child items - in our case a checkbox on a list item that has been dynamically added. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The source is available at &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/15%20-%20LocalStorage&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 16: CSS text shadow mouse move effect&lt;/h2&gt;
&lt;p&gt;Today’s challenge was to animate the text-shadow of a word. &lt;code class=&quot;language-text&quot;&gt;offsetX&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;affsetY&lt;/code&gt; and a bit of maths was all that was needed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;offsetX&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;offsetY&lt;/code&gt; give you the position of your cursor on screen.&lt;/li&gt;
&lt;li&gt;Template literals are a huge improvement over concatenation of variables.&lt;/li&gt;
&lt;li&gt;Object desctructuring reduces the amount of code you need to write:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const width = hero.offSetWidth;
const height = hero.offsetHeight;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;becomes:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;const { offsetWidth: width, offsetHeight: height } = hero;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The source is available at &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/16%20-%20Mouse%20Move%20Shadow&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 17: Sort&lt;/h2&gt;
&lt;p&gt;Today’s challenge was to use of &lt;code class=&quot;language-text&quot;&gt;Array.prototype.sort()&lt;/code&gt; to sort a list of band names alphabetically. The challenging part was to ignore the articles &lt;em&gt;A&lt;/em&gt;, &lt;em&gt;An&lt;/em&gt; or &lt;em&gt;The&lt;/em&gt; at the start of a name.&lt;/p&gt;
&lt;p&gt;My initial solution was quite long and I didn’t think to use a regular expression to find the article - something to bear in mind for next time!&lt;/p&gt;
&lt;p&gt;The source is available at &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/17%20-%20Sort%20Without%20Articles&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 18: Reduce&lt;/h2&gt;
&lt;p&gt;Challenge: Add up a list of times stored in list item data attributes. To do this we need to get minutes and seconds separately, store in an array, convert to seconds and add them together.&lt;/p&gt;
&lt;p&gt;I’ve done something similar before and took a more long-winded &lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt; loop approach. It turns out that &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;reduce&lt;/code&gt; can be combined to do the same thing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Array.prototype.map()&lt;/code&gt; takes in an array and returns an array&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Array.prototype.reduce()&lt;/code&gt; takes in an array and returns anything you want&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The source is available at &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/18%20-%20Adding%20Up%20Times%20with%20Reduce&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 19: Webcam&lt;/h2&gt;
&lt;p&gt;It was quite fun accessing my webcam and playing around with RGB filters - all with HTML, CSS and JavaScript!&lt;/p&gt;
&lt;p&gt;I discovered a new event: &lt;code class=&quot;language-text&quot;&gt;canplay&lt;/code&gt; which fires when a video is detected and has buffered enough to begin.&lt;/p&gt;
&lt;p&gt;The source for this one is available at &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/19%20-%20Webcam%20Fun&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 20: Native speech recognition&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;window.SpeechRecognition&lt;/code&gt; opens up a world of possibilites in the browser! &lt;/p&gt;
&lt;p&gt;This tutorial put spoken words on screen and hints at what else could be built - you can have keywords that call specific functions (e.g. asking for the weather). &lt;/p&gt;
&lt;p&gt;The source is available at &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/20%20-%20Speech%20Detection&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 21: Geolocation&lt;/h2&gt;
&lt;p&gt;In this challenge I used the Geolocation API to show a user’s speed/direction on screen. Playing around with the iOS emulator was a bit fiddly but I managed to get something working. &lt;/p&gt;
&lt;p&gt;One cool thing I learnt: &lt;code class=&quot;language-text&quot;&gt;navigator.geolocation.watchPosition();&lt;/code&gt; can be used to listen for the user’s position.&lt;/p&gt;
&lt;p&gt;The source is available at &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/21%20-%20Geolocation&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 22: Follow-along links&lt;/h2&gt;
&lt;p&gt;The goal for this challenge was to create a hover state that follows the cursor.&lt;/p&gt;
&lt;p&gt;There’s some interesting things going on to get the dimensions of the element and to work out the cursor position on screen. &lt;/p&gt;
&lt;p&gt;Today’s useful method that I’d never heard of is &lt;code class=&quot;language-text&quot;&gt;Element.getBoundingClientRect()&lt;/code&gt; which returns the size of an element and its position relative to the viewport.&lt;/p&gt;
&lt;p&gt;The files for this project are on &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/22%20-%20Follow%20Along%20Link%20Highlighter&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 23: Speech synthesis&lt;/h2&gt;
&lt;p&gt;We looked at the Web Speech API in my favourite challenge so far. &lt;/p&gt;
&lt;p&gt;One thing I’ve noticed throughout the challenges is that Wes chains methods together. This is something I’ve started to do a lot more on projects.&lt;/p&gt;
&lt;p&gt;The file s are on
&lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/23%20-%20Speech%20Synthesis&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 24: Sticky nav on scroll&lt;/h2&gt;
&lt;p&gt;I’ve done this many times but never using vanilla JavaScript so it’s good to see it done as plainly as possible.&lt;/p&gt;
&lt;p&gt;The files are on
&lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/24%20-%20Sticky%20Nav&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 25: Event capturing, Propagation, Bubbling and Once&lt;/h2&gt;
&lt;p&gt;Bubbling is where an event triggers on the lowest element in the DOM and then moves up triggering parents in nested order. &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;event.stopPropagation()&lt;/code&gt; &lt;em&gt;Prevents further propagation of the current event in the capturing and bubbling phases&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Event capturing works down through the DOM. Once events have been captured they are triggered and bubble back up.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;capture: true&lt;/code&gt; Can be passed to an event handler. It runs the function on the way down rather than on the way up.&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;once&lt;/code&gt; function  listens for a click once and unbinds the element for future clicks. A good usecase would be on a store checkout button where you want to prevent the user from checking out twice.&lt;/p&gt;
&lt;p&gt;The files are on
&lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/25%20-%20Event%20Capture%2C%20Propagation%2C%20Bubbling%20and%20Once&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Some useful links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://javascript.info/tutorial/bubbling-and-capturing&quot;&gt;Bubbling and capturing&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation&quot;&gt;Event.stopPropagation()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Day 26: Follow-along dropdown&lt;/h2&gt;
&lt;p&gt;Today’s challenge built on day 22 - create a set of navigation menus that transform in width and height as you move from one to another.&lt;/p&gt;
&lt;p&gt;The final code is on &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/26%20-%20Stripe%20Follow%20Along%20Nav&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Day 27: Click and drag to scroll&lt;/h2&gt;
&lt;p&gt;Today I learned that it’s suprisingly difficult to create a horizontal drag and scroll menu! A bit of maths with &lt;code class=&quot;language-text&quot;&gt;pageX&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;offsetLeft&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;scrollLeft&lt;/code&gt; is how you achieve the end result.&lt;/p&gt;
&lt;p&gt;The final code is on &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/27%20-%20Click%20and%20Drag&quot;&gt;github&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;Day 28: Video speed controller UI&lt;/h2&gt;
&lt;p&gt;This challenge was to add a speed controller to a video. I’ve not seen a video UI control quite like this so it was interesting to build.&lt;/p&gt;
&lt;p&gt;The final code is on &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/28%20-%20Video%20Speed%20Controller&quot;&gt;github&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;Day 29: Countdown timer&lt;/h2&gt;
&lt;p&gt;This task was to build a countdown clock with pre-set timer buttons. I tweaked it to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Pomodoro_Technique&quot;&gt;pomodoro&lt;/a&gt; times.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Date.now()&lt;/code&gt; is a new static method that returns the current timestamp in miliseconds.&lt;/li&gt;
&lt;li&gt;You can select a form element directly if it has a name attribute e.g. &lt;code class=&quot;language-text&quot;&gt;Document.formName&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code is on &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/29%20-%20Countdown%20Timer&quot;&gt;github&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;Day 30: Whack-a-mole&lt;/h2&gt;
&lt;p&gt;That’s it - day 30 and I’ve finished! The final challenge was to build a whack-a-mole game. It seems complex but breaking it down into a handful of small functions really helps.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Event.isTrusted&lt;/code&gt; is true if an event was generated by a user action and false when it was created by a script. This is useful here because it would prevent a user from cheating! &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code for the game is on &lt;a href=&quot;https://github.com/philbaker/JavaScript30/tree/master/30%20-%20Whack%20A%20Mole&quot;&gt;github&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I had fun working with the various web APIs: speech synthesis, geolocation, HTML5 audio and video etc, however it was the everyday things that impressed me the most:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;forEach&lt;/code&gt; is more readable than a for loop.&lt;/li&gt;
&lt;li&gt;The array methods &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;filter&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;reduce&lt;/code&gt; are incredibly useful and encourage a jQuery-like chaining of methods.&lt;/li&gt;
&lt;li&gt;Arrow functions cut down on code length and aid readability.&lt;/li&gt;
&lt;li&gt;Promises provide a robust way to manage asynchronous operations.&lt;/li&gt;
&lt;li&gt;Template literals are a joy to work with - no more concatenating strings and variables or escaping quotes. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here’s to another 970 projects!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Common Gulp Tasks]]></title><description><![CDATA[I’ve been using Gulp for a couple of years now. I originally had huge set of tasks available so that I’d be ready for any problem, but it…]]></description><link>https://philbaker.dev/blog/common-gulp-tasks/</link><guid isPermaLink="false">https://philbaker.dev/blog/common-gulp-tasks/</guid><pubDate>Mon, 17 Oct 2016 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I’ve been using Gulp for a couple of years now. I originally had huge set of tasks available so that I’d be ready for any problem, but it became a dependency nightmare, especially when working with Windows (try deleting the node_modules folder!) I’m back now with a fairly simple set of tasks that cover the essentials. I’d highly recommend Browser-sync for local server and live-reload features.&lt;/p&gt;
&lt;p&gt;Here’s the gulpfile that I’m using at the moment:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&apos;use strict&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; gulp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;gulp&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; sass &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;gulp-sass&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; browserSync &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;browser-sync&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; cssmin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;gulp-cssmin&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rename &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;gulp-rename&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; sourcemaps &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;gulp-sourcemaps&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; autoprefixer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;gulp-autoprefixer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;serve&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    browserSync&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        proxy&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://localhost.xxxx&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        notify&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;watch&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./css/**/*.scss&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;sass&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./css/*.css&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;autoprefixer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;*.php&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;change&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; browserSync&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;reload&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;sass&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./css/**/*.scss&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sourcemaps&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;outputStyle&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;compressed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;error&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sass&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;logError&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sourcemaps&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./css&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;browserSync&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; autoprefixerOptions &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    browsers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;last 2 versions&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&gt; 5%&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;autoprefixer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./css/*.css&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;autoprefixer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;autoprefixerOptions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./css&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; defaultTasks &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;sass&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;autoprefixer&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;serve&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;watch&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;default&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; defaultTasks&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And package.json to go along with it:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;gulp&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;latest&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;gulp-sass&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;latest&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;browser-sync&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;latest&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;gulp-cssmin&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;latest&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;gulp-rename&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;latest&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;gulp-sourcemaps&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;latest&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;gulp-autoprefixer&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;latest&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Talk Web Design 2015]]></title><description><![CDATA[TalkWD managed to improve on last years’ conference with a fine mix of practical, fun and inspirational talks. I went away with renewed…]]></description><link>https://philbaker.dev/blog/talk-web-design-2015/</link><guid isPermaLink="false">https://philbaker.dev/blog/talk-web-design-2015/</guid><pubDate>Mon, 25 May 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;TalkWD managed to improve on last years’ conference with a fine mix of practical, fun and inspirational talks. I went away with renewed passion for progressive enhancement and accessibility, and excitement about future improvements to browsers. &lt;/p&gt;
&lt;p&gt;A special thanks to David, Prisca and Greenwich Uni for putting on a great free event for students. &lt;/p&gt;
&lt;h2&gt;Charlotte Jackson - Becoming a front-end developer&lt;/h2&gt;
&lt;p&gt;Charlotte walked us through her journey from student to working in industry. Some of these points rang true for me, and will serve as great advice to anyone looking to get started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You learn a great deal from working with clients .&lt;/li&gt;
&lt;li&gt;Working for a client will force you to learn something you don’t know. On a course you can choose to skip the difficult things.&lt;/li&gt;
&lt;li&gt;Meetups really important. Front End London is a good one.&lt;/li&gt;
&lt;li&gt;Getting industry experience alongside degree is a great way to get started.&lt;/li&gt;
&lt;li&gt;‘You never stop learning’ - even the experienced developers are constantly learning new things.&lt;/li&gt;
&lt;li&gt;You should really be sharing what you’re learning. It is really useful to write things down - you’ll find yourself looking back at it. &lt;/li&gt;
&lt;li&gt;There are a lot of people who are learning to code, they can learn from your resources too.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Closing tips:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Get used to learning: ‘One does not simply learn everything on their first day.&lt;/li&gt;
&lt;li&gt;Get a good set of resources together: A List Apart etc &lt;/li&gt;
&lt;li&gt;Create you own website and share what you learn. &lt;/li&gt;
&lt;li&gt;Go for it: Get in touch with people, volunteer at conferences and meet new people.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Adam Onishi - Best viewed with…&lt;/h2&gt;
&lt;p&gt;Adam raised a series of questions in his talk, mostly around the rise of client-side apps and the role of progressive enhancement in web development today.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘Best viewed with Chrome’ - are we moving back to the browser wars?&lt;/li&gt;
&lt;li&gt;Each vendor is adding new things rapidly but you end up with disjointed feature sets.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Progressive enhancement&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Robustness principle: be conservative in what you do be liberal in what you accept.&lt;/li&gt;
&lt;li&gt;Canvas and audio can still be used with fallback content.&lt;/li&gt;
&lt;li&gt;Html5 inputs will just fallback to simple text input.&lt;/li&gt;
&lt;li&gt;The rem fallback is a good example of progressive enhancement. By putting the rem value second, old browsers will just skip it. &lt;/li&gt;
&lt;li&gt;JS not so easy when it comes to progressive enhancement. If it breaks your website will break. &lt;/li&gt;
&lt;li&gt;‘Cutting the mustard’: Finding ways to determine if the current browser is capable of running the latest and greatest - if they do, serve the best experience if not don’t.&lt;/li&gt;
&lt;li&gt;ES6 - starting to be used. When browsers start to support it what happens? Do we start to ignore old browsers? Introduces a lot of questions.&lt;/li&gt;
&lt;li&gt;Important to note: Not everyone gets Javascript. &lt;a href=&quot;http://kryogenix.org/code/browser/everyonehasjs.html&quot;&gt;Everyone has JavaScript, right?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If your website is just content, don’t rely on JS to serve it.&lt;/li&gt;
&lt;li&gt;MVC frameworks, websites running completely in the client introduce accessibility and SEO problems. Needing to reimplement basic browser features like scrolling seems counterintuitive.&lt;/li&gt;
&lt;li&gt;Performance: NASA site takes 24s to load on 3G. Companies starting to go back to the server rather than client side apps
Javascript shouldn’t be doing all the work (although some solutions use JS as backend language too). &lt;/li&gt;
&lt;li&gt;Service worker: It will soon be possible to have background processes with websites. Performance improvement and offline web capabilities, background syncing and push notifications etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Ann McMeekin Carrier - Beautiful design for everyone&lt;/h2&gt;
&lt;p&gt;Ann’s talk impressed upon me the importance of including everyone when making websites. When you design for inclusion it benefits everyone. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Good design is inclusive, beauty alone is not enough.  &lt;/li&gt;
&lt;li&gt;Accessibility as we consider it is not that exciting. Some people concerned that accessibility can make things boring and awkward.&lt;/li&gt;
&lt;li&gt;What’s the problem? People can become uncomfortable with disability because they think, ‘what would my life be like if I had that disability?’&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=l7AWnfFRc7g&quot;&gt;Empathic Civilisation on YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;‘Although the world is full of suffering, it is also full of overcoming it’
&lt;a href=&quot;http://www.ted.com/talks/aimee_mullins_prosthetic_aesthetics?language=en&quot;&gt;Aimee Mullins: My 12 pairs of legs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;User research: Important to understand the audience you are building for. Think about the fact that people have needs related to a health condition may not consider themselves disabled.&lt;/li&gt;
&lt;li&gt;Give people their independence, many do not want to rely on other people to do basic things. &lt;/li&gt;
&lt;li&gt;Design principles give you the means to make decisions, it takes things away from personal opinion.&lt;/li&gt;
&lt;li&gt;you cannot design for everyone. There will always be edge cases.&lt;/li&gt;
&lt;li&gt;Structure: It is very easy for websites to grow out of control. Having a plan and design principles will help you stay on track. &lt;/li&gt;
&lt;li&gt;Users will always do things with your interface that you don’t expect.&lt;/li&gt;
&lt;li&gt;Putting in accessibility features does not only help those with accessibility needs. Ramps at bus stops are used by parents with buggies. OXO good grip peelers designed for women with arthritis - now widely used because they are so easy to grip.&lt;/li&gt;
&lt;li&gt;Progressive enhancement: If you start from a good solid base experience and build on it that’s your best way of meeting peoples’ core needs. &lt;/li&gt;
&lt;li&gt;Provide alternatives if you can’t make things that suit all people. E.g. An annual report with print and braille. &lt;/li&gt;
&lt;li&gt;Image captions can help give people context as well as screen readers.&lt;/li&gt;
&lt;li&gt;People need to be able to complete tasks in difference places on different systems. We need to take these needs into consideration.&lt;/li&gt;
&lt;li&gt;Working in banking: Noisy, bad ergonomics - that environment impairs most peoples ability to do their job. If you design for the need rather than the disability chances are you’ll meet everyones needs better.&lt;/li&gt;
&lt;li&gt;How to find out more: &lt;a href=&quot;http://www.accessifyforum.com/&quot;&gt;Accessify forum&lt;/a&gt;, #a11y, ask people who know about it. If you don’t know how to do something, look it up, ask - people will help.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Trine Falbe - Designing web interfaces for kids&lt;/h2&gt;
&lt;p&gt;This talked followed on well from Ann’s. Thinking about a child’s experience on the web, how difficult it can be to browse the web without being exposed to adverts or tricked to download viruses was eye opening.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The browser was born in March 1989. This lead to a change of paradigm. In the age of phones etc we had control over to the time an action took.&lt;/li&gt;
&lt;li&gt;The internet paradigm: No mental framework that includes time control. We don’t have control over how fast a website loads. &lt;/li&gt;
&lt;li&gt;Interestingly kids seem able to wait for things to load. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Design guidelines&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;There is so much crap on the web: Lots of stuff set up to send viruses or advertising. We are spamming out kids with adverts.&lt;/li&gt;
&lt;li&gt;4/5 kids don’t know when they are being advertised to.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Development timeline&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Age 2: Kids develop sense of self. Can’t draw a straight line but can swipe and iPad. Can’t use keyboards.&lt;/li&gt;
&lt;li&gt;Age 6: Frontal lobe more developed. Can use a computer mouse.&lt;/li&gt;
&lt;li&gt;Age 10: Motor skills fully developed. Fully developed physical skills but no ability to think abstractly.&lt;/li&gt;
&lt;li&gt;The brain is only fully developed at age 26.&lt;/li&gt;
&lt;li&gt;The ability to think abstractly helps us to understand the consequences of actions, so throwing adverts at children is unfair.&lt;/li&gt;
&lt;li&gt;Small kids use the youtube app, games and touch screen devices. They grow up with interfaces with lots of buttons and little text. They know the play, pause and reload symbols.&lt;/li&gt;
&lt;li&gt;Language: We start learning language in the womb. Can’t control language until 1 and a half. &lt;/li&gt;
&lt;li&gt;Baby sign language: We can use tools to work around the physical constraints of a child.&lt;/li&gt;
&lt;li&gt;Reading skills: kids learn to read around age 6. They learn to read much faster than they can write.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Design tips&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Keep data entry simple: This is a physical thing and not all kids are able to do.&lt;/li&gt;
&lt;li&gt;Use buttons not text links for navigation. Kids growing up today have a mental framework for buttons rather than text. &lt;/li&gt;
&lt;li&gt;Use icons and images: The younger the child, the closer the icon needs to be to reality.&lt;/li&gt;
&lt;li&gt;Use voice-over sound for small kids. &lt;/li&gt;
&lt;li&gt;Use auto-complete and visual search for small kids. &lt;/li&gt;
&lt;li&gt;Design for social: More than 30% of kids in Trine’s study use the computer with someone else.&lt;/li&gt;
&lt;li&gt;Provide instructions on demand. Younger kids will leave if not successful. Post failure messages very helpful for older kids - they can learn from their mistakes.&lt;/li&gt;
&lt;li&gt;Design for play: Gamification a great way for engaging.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Dan Edwards - Finding your mojo&lt;/h2&gt;
&lt;p&gt;Dan gave a thought-provoking and fun talk about losing his motivation, and finding it again. The most interesting part for me is remembering why we got into this - something that is easy to forget day to day. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mojo is hard to define: Somewhere between happiness and meaning&lt;/li&gt;
&lt;li&gt;Dan thought he had ‘made it’ after winning some awards, ended up feeling deflated: &lt;a href=&quot;https://medium.com/@de/treading-through-treacle-26d4393ec98f&quot;&gt;Treading through treacle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;One guarantee: life will knock you down at some point. &lt;/li&gt;
&lt;li&gt;There is no perfect job, no perfect person - there are downsides to this career. &lt;/li&gt;
&lt;li&gt;Twitter can leave you feeling a bit shit. Lot’s of people doing great things. &lt;/li&gt;
&lt;li&gt;Projects: As a rule work on projects that excite you - this is a healthy business attitude not a spoilt brat attitude. &lt;/li&gt;
&lt;li&gt;Not saying yes to every project is key to staying motivated.&lt;/li&gt;
&lt;li&gt;Side projects are awesome, but people tend to have ridiculous amounts of unfinished projects.&lt;/li&gt;
&lt;li&gt;Why didn’t they launch? Usually excuses about not having time, client work getting in the way, faffing over small details etc - just get it out there!&lt;/li&gt;
&lt;li&gt;Environment: Take time to step away, time to unplug. Getting outside is vital. The amount of sun exposure you have reduces stress.&lt;/li&gt;
&lt;li&gt;Work with people who can support you. Dan has set up &lt;a href=&quot;http://nodivide.us&quot;&gt;No Divide&lt;/a&gt; with Ryan Taylor.&lt;/li&gt;
&lt;li&gt;Understanding your value: You are a professional and you should be treated as such. Working with clients who like and respect you is important.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Closing Tips:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Remember what brought you here in the first place.&lt;/li&gt;
&lt;li&gt;Nobody starts off being excellent. &lt;/li&gt;
&lt;li&gt;Work should be fun.&lt;/li&gt;
&lt;li&gt;Don’t be discouraged when things get difficult.&lt;/li&gt;
&lt;li&gt;Don’t be lonely - speak to people. Talk about what you’re working on and don’t be afraid to shout about your work. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Christopher Murphy - Life 2.0&lt;/h2&gt;
&lt;p&gt;A personal story from Christopher, some good motivational tips and a good few laughs. My personal highlight was the comparing developers to Spock (logical) and designers to Kirk (sleeps with aliens).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Once you have identified your passion, you should build your life around it.&lt;/li&gt;
&lt;li&gt;The time bank: Everyone gets the same amount of time. You can use it wisely or trickle it away. &lt;/li&gt;
&lt;li&gt;Time to internet (from when you wake up): Not the best use of your time to always be connected. We are never away from these devices. &lt;/li&gt;
&lt;li&gt;Are we &lt;strong&gt;not&lt;/strong&gt; getting around to important things because of getting drawn into twitter debates?&lt;/li&gt;
&lt;li&gt;All the things: you can’t do them. &lt;/li&gt;
&lt;li&gt;All the tools: You need to have an awareness of some of these things but you down need to know it all. (Npm, react, node, angular…).&lt;/li&gt;
&lt;li&gt;Just do some of the things and do them really well.&lt;/li&gt;
&lt;li&gt;Build margin into your working week: If your diary is overloaded when do you get time to think?&lt;/li&gt;
&lt;li&gt;Build space into Callander and diary. Use the space to learn new things.&lt;/li&gt;
&lt;li&gt;Hard work required (10,000 hours). There is no substitute for hard work, but don’t put the pressure on yourself of having to be the best.&lt;/li&gt;
&lt;li&gt;Reflect: Having space to put ideas down is incredibly valuable. If you find a nugget of wisdom write it down.&lt;/li&gt;
&lt;li&gt;Put your writing out there - no one will die. Also, no one will read it anyway! &lt;/li&gt;
&lt;li&gt;You can use writing to write yourself into existence.&lt;/li&gt;
&lt;li&gt;Once you have a blog you begin to notice things more.&lt;/li&gt;
&lt;li&gt;You can be more than one thing - you don’t have to just be your 9-5. &lt;/li&gt;
&lt;li&gt;Don’t watch the hobbit trilogy&lt;/li&gt;
&lt;li&gt;Likes can be time consuming and counter productive - don’t fall into trap of getting likes etc. It’s pointless - ‘Its all just mindless ‘like-farming’.&lt;/li&gt;
&lt;li&gt;You really need to believe in yourself.&lt;/li&gt;
&lt;li&gt;There’s always someone better than you. That’s okay - don’t beat yourself up about it, be the best you can be.&lt;/li&gt;
&lt;li&gt;Important to take time out - do stuff not related to web design. Do things to have a laugh.&lt;/li&gt;
&lt;li&gt;‘Late binding’: I’m not a procrastinator I’m just &lt;a href=&quot;http://www.jnd.org/dn.mss/why_procrastination_.html&quot;&gt;late-binding&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Legacy: What do you want to leave behind? Steve Jobs legacy was Apple and its culture, a way to run a company - not the iPad and iPhone. &lt;/li&gt;
&lt;li&gt;Do what matters - don’t waste your time. Make every day count.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Books recommendations:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The Element, Ken Robinson.&lt;/li&gt;
&lt;li&gt;Do, Why brands with purpose do better (e.g. people with a passions).&lt;/li&gt;
&lt;li&gt;Managing oneself, Peter Drucker. &lt;/li&gt;
&lt;li&gt;Clue train manifesto.&lt;/li&gt;
&lt;li&gt;Alain de Botton, Status Anxiety.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bruce Lawson - Bruce’s tour of the sausage factory&lt;/h2&gt;
&lt;p&gt;From life-changing, motivational advice to …sausages. Bruce gave a hilarious yet pragmatic introduction to the standards process.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Standards are not devised by the greatest minds. Often involve power struggles.&lt;/li&gt;
&lt;li&gt;In the early 1900s companies competed on piano rolls - many different standards. In 1908 the manufacturers met to agree on a standard. Same arguments used about piano rolls are argued about the web today.&lt;/li&gt;
&lt;li&gt;Railway coaches: Arbitrary width. Ukraine Russian border - different gauges so trains need to be moved to new tracks each time - this takes an hour each time.&lt;/li&gt;
&lt;li&gt;American civil war: Southern states had different gauges, this arguably contributed to defeat.&lt;/li&gt;
&lt;li&gt;Open standards between machines makes everything easier and cheaper. &lt;/li&gt;
&lt;li&gt;Horse obesity is a worrying issue. &lt;/li&gt;
&lt;li&gt;Standards are added retrospectively - implemented by one browser, copied by others and then standardised. E.g. xmlHttpRequest, Canvas.&lt;/li&gt;
&lt;li&gt;Canvas was reverse engineered. Reverse engineering is the worst way to make standards. &lt;/li&gt;
&lt;li&gt;Patents: The biggest danger to a free, open web.&lt;/li&gt;
&lt;li&gt;XHTML2 is a standard that people sat down and wrote, spent hours on it but had not resemblance to real world. Html5 is backwards compatible to support old content. This is our digital heritage.&lt;/li&gt;
&lt;li&gt;Service worker is Appcache done right - no hidden magic.&lt;/li&gt;
&lt;li&gt;Service worker forces you to have urls - urls are the fundamental building block of the web and we should never lose them.&lt;/li&gt;
&lt;li&gt;Geolocation API: Native power brought to the web.&lt;/li&gt;
&lt;li&gt;Open standards belong to no one, companies come and go. The web is too important to ever be in the hands of one company. That’s why we need standardisation. &lt;/li&gt;
&lt;li&gt;Web components: Allow you to write your own html tags. Encapsulated bits of html&lt;/li&gt;
&lt;li&gt;Vital to get your voice into the web specification discussion.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Ben Foxall - Internet of browsers&lt;/h2&gt;
&lt;p&gt;Following his talk last year, Ben gave another interactive talk. This time he demonstrated which device capabilities can be identified and used by Javascript. He had our phones pinging in various orders, plotted data on graphs and got the audience involved throughout.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The internet of things is vague, there are no parameters surrounding it.&lt;/li&gt;
&lt;li&gt;Our craft is not necessarily about writing the best code - it’s about making things that are good for people to use.&lt;/li&gt;
&lt;li&gt;Technology doesn’t have to be a black box. &lt;/li&gt;
&lt;li&gt;Amazing how blogging, and websites can have an impact on other peoples lives.&lt;/li&gt;
&lt;li&gt;Open data certificate: Changing things in the world with our content.&lt;/li&gt;
&lt;li&gt;We should be trying to change the world: Create things with the end user in mind.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Increasing my productivity - tools and techniques for better computer usage]]></title><description><![CDATA[I spend a lot of time in front of a computer and have been getting frustrated at my lack of speed when navigating and typing. I started…]]></description><link>https://philbaker.dev/blog/increasing-computer-productivity/</link><guid isPermaLink="false">https://philbaker.dev/blog/increasing-computer-productivity/</guid><pubDate>Sun, 06 Jul 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I spend a lot of time in front of a computer and have been getting frustrated at my lack of speed when navigating and typing. I started improving things a couple of months ago and thought it would be useful to write about the key changes I’ve made.&lt;/p&gt;
&lt;h2&gt;Keyboard shortcuts&lt;/h2&gt;
&lt;p&gt;For some reason I never bothered with keyboard shortcuts. Copy and paste were the only ones in my muscle memory. Here are some shortcuts I now use regularly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;cmd + tab&lt;/code&gt; switch apps &lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;cmd + backtick&lt;/code&gt; switch to a different instance of the same app &lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;cmd + q&lt;/code&gt; quit current app&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;cmd + w&lt;/code&gt; close current window&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;cmd + option + h&lt;/code&gt; close all windows except the current one&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Browser shortcuts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;cmd + l&lt;/code&gt; gives focus to url bar&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;cmd + t&lt;/code&gt; to open a new tab in &lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ctrl + tab&lt;/code&gt; select next tab&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;ctrl + shift + tab&lt;/code&gt; select previous tab&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;cmd + w&lt;/code&gt; close current tab&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Apps&lt;/h3&gt;
&lt;p&gt;Some of my most useful shortcuts are provided by apps. I use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.irradiatedsoftware.com/sizeup/&quot;&gt;SizeUp&lt;/a&gt;, which provides keyboard shortcuts for window management. &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.alfredapp.com/&quot;&gt;Alfred&lt;/a&gt;, a highly customisable replacement for Spotlight. I use it for loading and switching apps, quick calculations, checking the weather and the odd google search. I feel like I’m only scratching the surface of what Alfred can do.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://kapeli.com/dash&quot;&gt;Dash&lt;/a&gt;, a snippet manager and documentation browser which helps me avoid the black hole that is stackoverflow.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Touch typing&lt;/h2&gt;
&lt;p&gt;Learning to type properly takes your eyes off of the keyboard and on to the screen. I started with tutorials and tests on
&lt;a href=&quot;http://www.ratatype.com/learn/&quot;&gt;Ratatype&lt;/a&gt; and &lt;a href=&quot;https://itunes.apple.com/us/app/typist/id415166115?mt=12&quot;&gt;Typist for Mac&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Within a few weeks I reached a decent speed, but then started feeling pain in my hands and wrists. I took a break for a while, improved my posture and even bought an ergonomic keyboard, but the pain persisted.&lt;/p&gt;
&lt;h3&gt;Dvorak keyboard layout&lt;/h3&gt;
&lt;p&gt;After a bit of research I discovered touch typing with Qwerty can cause hand pain. Qwerty was originally designed to keep typewriter keys from jamming—by spreading commonly used letters far apart. This was good for typewriters but not so good for hands. &lt;/p&gt;
&lt;p&gt;I eventually decided to learn &lt;a href=&quot;http://www.kaufmann.no/roland/dvorak/&quot;&gt;Programmer Dvorak&lt;/a&gt;. The Dvorak layout places the most common English characters on the home row, reducing the stress on hands. &lt;/p&gt;
&lt;p&gt;Learning a new layout is frustrating—especially when you go cold turkey. The first week was a write-off in terms of productivity. I’ve been learning for four weeks now and can type at a bearable speed of ~30 words per minute. I doubt Dvorak is faster than Qwerty but it is certainly more comfortable. The pain in my hands has gone now too.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ma.tt/2003/08/on-the-dvorak-keyboard-layout/&quot;&gt;On the Dvorak keyboard layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.dvzine.org/&quot;&gt;The Dvorak Zine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://c2.com/cgi/wiki?DvorakKeyboardUsers&quot;&gt;Dvorak keyboard users&lt;/a&gt; – an interesting collection of Dvorak users’ experiences. &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://learn.dvorak.nl/&quot;&gt;Dvorak keyboard training&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://matt.might.net/articles/preventing-and-managing-rsi/&quot;&gt;Handling Repetitive Strain Injury&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The command line&lt;/h2&gt;
&lt;p&gt;Having played with Linux a fair bit I have seen many arguments for using the command line over a graphical user interface. The main argument is that you can get things done faster with commands. &lt;/p&gt;
&lt;p&gt;In a GUI you have to use the mouse, find the right icon, figure out how to use a menu, and deal with inconsistent designs. These annoyances aren’t always noticeable but the cumulative effect is wasted time.&lt;/p&gt;
&lt;p&gt;I decided to get into to the command line by ditching my GUI development tools. I have replaced CodeKit with Gulp, which compiles and minifies my Sass, and refreshes the browser with live-reload. Sublime Text has been replaced with Vim. &lt;/p&gt;
&lt;p&gt;I have found CLI tools to be cheaper (free), more flexible and more regularly updated than GUI alternatives. I can now share my setup across computers by sticking my &lt;a href=&quot;http://dotfiles.github.io/&quot;&gt;dotfiles&lt;/a&gt; on Github. I no longer have to worry about license fees and Mac-only software.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Treehouse have a good article on command line basics on &lt;a href=&quot;http://blog.teamtreehouse.com/command-line-basics&quot;&gt;their blog&lt;/a&gt; and a more &lt;a href=&quot;http://teamtreehouse.com/library/console-foundations-2&quot;&gt;in depth course&lt;/a&gt; which I recommend.&lt;/li&gt;
&lt;li&gt;Dan Benjamin had a great video tutorial called &lt;em&gt;Meet the Command Line&lt;/em&gt; which no longer appears to exist. Andy Taylor did a great job of summarising it in his post &lt;a href=&quot;http://andytaylor.me/2012/11/03/unix-command-line-usage-notes/&quot;&gt;UNIX Command Line Usage Notes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Vim text editor&lt;/h2&gt;
&lt;p&gt;If you write code for a living, learning your text editor well is a good idea. I used the excellent Sublime Text 2 for a while before switching to Vim. &lt;/p&gt;
&lt;p&gt;Vim is a text editor driven completely by keyboard commands (known as key bindings). It allows you to manipulate text with commands. Once you learn basic commands you can start combining them: &lt;code class=&quot;language-text&quot;&gt;G20&lt;/code&gt; is go to line 20 and &lt;code class=&quot;language-text&quot;&gt;d2w&lt;/code&gt; is delete two words. The best article I have read on this is &lt;a href=&quot;http://yanpritzker.com/2011/12/16/learn-to-speak-vim-verbs-nouns-and-modifiers/&quot;&gt;Learn to speak vim – verbs, nouns, and modifiers!&lt;/a&gt; by Yan Pritzker. &lt;/p&gt;
&lt;p&gt;Learning Vim initially slowed me down, but it has been worth the sacrifice. It reminds me of the classic article &lt;a href=&quot;http://norvig.com/21-days.html&quot;&gt;Teach yourself programming in Ten Years&lt;/a&gt;. The web industry is often distracted by the new and shiny—but I’m excited to be using a text editor older than myself, which was developed on &lt;a href=&quot;http://www.catonmat.net/blog/why-vim-uses-hjkl-as-arrow-keys/&quot;&gt;this terminal&lt;/a&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sitepoint.com/getting-started-vim/&quot;&gt;Getting started with Vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/&quot;&gt;Learn Vim progressively&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://derekwyatt.org/vim/tutorials/&quot;&gt;Vim Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yehudakatz.com/2010/07/29/everyone-who-tried-to-convince-me-to-use-vim-was-wrong/&quot;&gt;Everyone who tried to convince me to use Vim was wrong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vimcasts.org/&quot;&gt;Vimcasts&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vim-adventures.com/&quot;&gt;Vim Adventures&lt;/a&gt; - a game which teaches you Vim commands.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vimeo.com/vimlondon/videos&quot;&gt;Vim London talks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://xn--h4hg.ws/2013/12/19/how-to-learn-vim/&quot;&gt;How to learn Vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://xn--h4hg.ws/2013/12/15/common-vim/&quot;&gt;Common Vim commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tnerual.eriogerg.free.fr/vimqrc.pdf&quot;&gt;Vim reference card&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Markdown&lt;/h2&gt;
&lt;p&gt;Markdown is a wonderfully simple syntax which allows documents to be written plain text, and then converted to html. I avoided learning it for a long time, thinking it would be difficult to pick up. I needed to learn it after switching my blog to &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; and was surprised that the main syntax took around 10 minutes to memorise. I can now write posts on any device and publish via Git. If you know html or write frequently you’ll love Markdown.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The future&lt;/h2&gt;
&lt;p&gt;It has been fun learning some new tricks, it feels a bit like playing a video game. The challenge has made my work even more enjoyable (aside from that first week of Dvorak typing). I don’t feel particularly fast at anything at the moment but I am improving every day. I’m especially looking forward to typing and editing text at the speed of thought. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Responsive Day Out 2]]></title><description><![CDATA[I had a good responsive day out in Brighton last Friday. Last year’s event felt like a group therapy session at times—speakers and attendees…]]></description><link>https://philbaker.dev/blog/responsive-day-out-2/</link><guid isPermaLink="false">https://philbaker.dev/blog/responsive-day-out-2/</guid><pubDate>Tue, 01 Jul 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I had a good responsive day out in Brighton last Friday. Last year’s event felt like a group therapy session at times—speakers and attendees were struggling with the challenges of responsive design, but left feeling relieved that everyone had similar experiences. &lt;/p&gt;
&lt;p&gt;This year, things were a little more settled—the same challenges remain, but we seem more used to them. My highlights were the calls for modular development, support for progressive enhancement and questioning whether we should build certain things.&lt;/p&gt;
&lt;h2&gt;Stephen Hay: Sculpting text&lt;/h2&gt;
&lt;p&gt;The opening talk covered Stephen’s initial design process. Stephen takes content in basic html form and makes small tweaks to the CSS using browser developer tools, eventually ending up with a basic mobile design. This truly is designing in the browser and something I can’t wait to try.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Good responsive design starts with structured text.&lt;/li&gt;
&lt;li&gt;We need to know the shape of our content before we start. &lt;/li&gt;
&lt;li&gt;Design in text: How can I express this idea in plain html?&lt;/li&gt;
&lt;li&gt;Don’t skip paper—the most important stage of the design phase.&lt;/li&gt;
&lt;li&gt;Only add something when it is needed.&lt;/li&gt;
&lt;li&gt;Write simple CSS.&lt;/li&gt;
&lt;li&gt;Keep checking on your site on real devices.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Sally Jenkinson: More than Media Queries&lt;/h2&gt;
&lt;p&gt;Sally gave an overview of the many considerations involved in planning a responsive project. It was refreshing to hear reference to ethics and privacy—just because you can build something doesn’t always mean you should.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are many ways we can make a website responsive, not just screen width. &lt;/li&gt;
&lt;li&gt;Be responsible with planning choices: Should we be building this at all?&lt;/li&gt;
&lt;li&gt;Consider the wider world when planning a project: Our users may not be like us.&lt;/li&gt;
&lt;li&gt;Ethics: Should we be building things that undermine privacy?&lt;/li&gt;
&lt;li&gt;Our decisions are not isolated: The best front-end code will not mask a broken back-end.  &lt;/li&gt;
&lt;li&gt;Get into code as soon as possible.&lt;/li&gt;
&lt;li&gt;Involve technical people from the beginning. &lt;/li&gt;
&lt;li&gt;Accessibility, performance and testing should not be overlooked.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Ida Aalen: The Core Model&lt;/h2&gt;
&lt;p&gt;Ida spoke about her experience working with the Norwegian Cancer Society. Her team uses the ‘Core Model’ to help users find relevant content, while ensuring the business needs of the society are met. This talk showed the positive impact a website can have on lives.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Research first: Don’t do anything without knowing user needs.&lt;/li&gt;
&lt;li&gt;Nobody visits a site just to see the home page, yet so much energy is given to it in the planning/design phase. &lt;/li&gt;
&lt;li&gt;The Core Model: Focus on paths to content, not hierarchical structure of site. &lt;/li&gt;
&lt;li&gt;Identify core pages by seeing which ones meet business goals and user needs.&lt;/li&gt;
&lt;li&gt;Inward paths: How does the user find the content they are seeking? &lt;/li&gt;
&lt;li&gt;Outward paths: Once the user has the answer, where should we send them next? Important to be sensitive to user’s context.&lt;/li&gt;
&lt;li&gt;The core is the same on all devices—a huge chunk of donations are made on mobile devices.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Rachel Andrew: CSS Grid Layout&lt;/h2&gt;
&lt;p&gt;I felt fairly comfortable with CSS layout before this talk, that was foolish of me! &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grid spec is rather complex right now, but it gets us away from relying on source order.&lt;/li&gt;
&lt;li&gt;Current implementation works in Chrome Canary with experimental flags.&lt;/li&gt;
&lt;li&gt;Once Grid and Flexbox are in browsers we will have proper layout tools designed for the web. &lt;/li&gt;
&lt;li&gt;Grid is suitable for bigger layouts whereas Flexbox is for smaller modules e.g navigation.&lt;/li&gt;
&lt;li&gt;Grid could be great for a CMS as layout is independent from content. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Dan Donald: Element Media Queries&lt;/h2&gt;
&lt;p&gt;Dan’s talk raised the idea of element media queries. He asked whether we should be restricted to viewport based media queries.  Dan challenged the idea of the web ‘page’ and called for developers to demonstrate their use cases for element media queries to browser vendors.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Responsive design is difficult because it is open to interpretation.&lt;/li&gt;
&lt;li&gt;Device agnostic breakpoints are ideal because of the universality of the web.&lt;/li&gt;
&lt;li&gt;Create systems rather than pages.&lt;/li&gt;
&lt;li&gt;Best way to encourage implementation of element media queries is  to show use-cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Inayaili de León: Realistic Responsive Design&lt;/h2&gt;
&lt;p&gt;Conference talks can sometimes give a rosy view of projects, so it was good to see Inayaili speak about the responsive implementation of Ubuntu’s site. The team behind it had other priorities, an existing fixed-width site to work with and limited budget for the project.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make a plan: Things take time so you need to be positive and patient.&lt;/li&gt;
&lt;li&gt;Define constraints early. The team knew they wouldn’t have time to rewrite content or to restructure the site. &lt;/li&gt;
&lt;li&gt;Recycle and reuse: It saves time, energy and money. &lt;/li&gt;
&lt;li&gt;Think evolution rather than revolution. &lt;/li&gt;
&lt;li&gt;If you had one hour what would you do to improve the site?&lt;/li&gt;
&lt;li&gt;Device testing: Use your analytics to define the most important devices to your project. &lt;/li&gt;
&lt;li&gt;Keep a record of the decisions you have made. &lt;/li&gt;
&lt;li&gt;Have a well defined style guide. This allows you to unearth variations of the same thing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Oliver Reichenstein: The Container Model&lt;/h2&gt;
&lt;p&gt;Oliver gave an entertaining talk, he criticised the use of traditional columns and called for full-width containers instead. This talk helped me realise that responsive design has changed so much more than layout. &lt;a href=&quot;http://www.theguardian.com/uk&quot;&gt;The guardian beta&lt;/a&gt; exemplifies the container model proposed.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Information Architecture is horrible, boring and depressing. &lt;/li&gt;
&lt;li&gt;Navigation is here to stay but is best kept simple.&lt;/li&gt;
&lt;li&gt;We don’t have to mirror the navigation structure on the home page. &lt;/li&gt;
&lt;li&gt;Columns don’t work: They are terrible for prioritisation, and confuse users by cramming unrelated content together.&lt;/li&gt;
&lt;li&gt;Mobile first design has forced people to prioritise their content. &lt;/li&gt;
&lt;li&gt;Containers are flexible e.g. top news container can feature sports, finance, politics depending on current events.&lt;/li&gt;
&lt;li&gt;Containers help avoid internal politics. No need to fight for space on home page as good content will rise to the top. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Kirsty Burgoine: A Question of deliverables and other such stuff&lt;/h2&gt;
&lt;p&gt;Kirsty gave a very open talk about the mistakes she has made since starting out on her own a few years ago.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Building trust is vital with new clients.&lt;/li&gt;
&lt;li&gt;Providing deliverables at key stages of the project keeps the client in the loop.&lt;/li&gt;
&lt;li&gt;There is no one workflow that works for every project. &lt;/li&gt;
&lt;li&gt;Different clients will expect different deliverables.&lt;/li&gt;
&lt;li&gt;Regular communication and sharing of ideas is key to a good client relationship.&lt;/li&gt;
&lt;li&gt;Plan and budget properly: Surprises are not good for you.&lt;/li&gt;
&lt;li&gt;Set expectations for all aspects of the beginning of the project.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Stephanie Rieger: The future of Media Queries?&lt;/h2&gt;
&lt;p&gt;Stephanie ran through some of the latest media query proposals, and questioned whether we need them. I’m struggling to see the usefulness of them too. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scripting: Allows us to see if JavaScript is available on the device. &lt;/li&gt;
&lt;li&gt;light-level: Changes screen brightness depending on environment. &lt;/li&gt;
&lt;li&gt;pointer: Used to query the presence and accuracy of a pointing device. &lt;/li&gt;
&lt;li&gt;hover: Checks if hover events will work on device.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Ethan Marcotte: Laziness in the time of Responsive Design&lt;/h2&gt;
&lt;p&gt;Ethan gave the keynote talk informing us that laziness is a virtue when building websites. It was pleasing to see his examples use simple CSS instead of convoluted JavaScript solutions. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Layout: Remove complexity by using less code.&lt;/li&gt;
&lt;li&gt;Frameworks are useful for beginners and prototypes but can be prescriptive.  &lt;/li&gt;
&lt;li&gt;The hamburger pattern: Is it common because users recognise it? Time.com implementation suggests not. &lt;/li&gt;
&lt;li&gt;Should we be hiding our navigation? &lt;/li&gt;
&lt;li&gt;Rather than persisting with enormous lists in an off canvas menu maybe we should ask if we need it at all.&lt;/li&gt;
&lt;li&gt;Well crafted responsive design is device agnostic. &lt;/li&gt;
&lt;li&gt;Progressive enhancement has been at the heart of all successful responsive designs.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Talk Web Design 2014]]></title><description><![CDATA[I had been looking forward to this conference for a while and TalkWD was definitely worth the wait. A big thank you to David and Prisca for…]]></description><link>https://philbaker.dev/blog/talk-web-design-2014/</link><guid isPermaLink="false">https://philbaker.dev/blog/talk-web-design-2014/</guid><pubDate>Thu, 08 May 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I had been looking forward to this conference for a while and TalkWD was definitely worth the wait. A big thank you to David and Prisca for bringing it together. &lt;/p&gt;
&lt;p&gt;Here are some notes I scrawled onto a napkin:&lt;/p&gt;
&lt;h2&gt;Pui-Ling Lau - Journey to the Web&lt;/h2&gt;
&lt;p&gt;Pui spoke about her background, experience on the MA and her achievements since, which many of us were inspired by. I was impressed to see how well her thesis project site has performed. &lt;/p&gt;
&lt;p&gt;There was some advice for attendees: Build up your portfolio, keep trying, learning and doing, go to conferences, and write your experiments—Pui has a ‘lab work’ section on her site which catalogues difficult problems and their solutions.&lt;/p&gt;
&lt;h2&gt;Kaelig - bridging the gap between developers and designers with Sass&lt;/h2&gt;
&lt;p&gt;Kaelig gave an insight into how the Guardian development team use Sass to create a common language between designers and developers. A lot of it was over my head but has inspired me to keep going with Sass. &lt;/p&gt;
&lt;p&gt;Variable names are decided between designers and developers, and breakpoints are given names which everyone can relate to. I found their approach to media queries is interesting—using mixins to include breakpoints: &lt;a href=&quot;https://github.com/guardian/sass-mq&quot;&gt;github.com/guardian/sass-mq&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Adam Onishi - The modern front-end developer toolkit&lt;/h2&gt;
&lt;p&gt;The front end is big… really big. There are lots of tools and that’s great, people have different preferences and tools can be useful for different jobs. &lt;/p&gt;
&lt;p&gt;Adam discussed the tools he finds useful: Sublime Text and plugins (Emmet, Git among others), Ghostlab for syncing browsers across many devices, boilerplates, frameworks, pre-processors and network link conditioner (mac), a tool for simulating different network connection speeds.&lt;/p&gt;
&lt;p&gt;The key takeaway for me was that developers do not need to learn all of the tools, rather learn things as we build websites. Oh, and use Github!&lt;/p&gt;
&lt;h2&gt;Laura Kalbag - All the mistakes I’ve made as a freelance designer&lt;/h2&gt;
&lt;p&gt;Laura gave a very open, honest talk packed with advice for freelancers: &lt;/p&gt;
&lt;p&gt;Set up projects with a 50% retainer and billing every other week for work completed. Contracts are really important, Andy Clarke’s contract killer is a good place to start. Never give your personal mobile number to clients. Give justifications for your decisions, this will help pre-empt problems and stops clients nit-picking. Get an address for the client so you can chase late invoices. Most importantly we don’t need to be competitive with one another—share with others, and learn from others.&lt;/p&gt;
&lt;h2&gt;Nicklas de León Persson - The asynchronous team — remote working the right way&lt;/h2&gt;
&lt;p&gt;This talk was about remote work and its benefits. &lt;/p&gt;
&lt;p&gt;The brain is easily distracted—it takes less effort to mindlessly surf the web than to focus on work. It takes an average of 15 minutes to get in the zone—consider the number of distractions in an average 8 hour day in the office. Meetings, while useful at times, can be incredibly wasteful. The key thing to consider when working from home is keep everything online and be transparent. “Document everything you are doing as if you are about to get hit by a bus.”&lt;/p&gt;
&lt;h2&gt;Ben Foxall - Multi-device interactions with the web&lt;/h2&gt;
&lt;p&gt;I loved this talk despite most of the technical details being over my head. Benjamin used some Javascript libraries to sync images across our devices and collected data about our screen sizes. I really enjoy these interactive talks and credit to Ben for getting everything working.&lt;/p&gt;
&lt;h2&gt;Kilian Bochnig, Victor Johansson &amp;#x26; Zassa Kavuma - Chüne, the Clearleft Graduate Internship Programme 2013 - ft Andy Budd&lt;/h2&gt;
&lt;p&gt;Three interns from different backgrounds were given a brief and three months to create a product, resulting in &lt;a href=&quot;http://chune.co.uk/&quot;&gt;Chune&lt;/a&gt;. It was great to see how they used their different strengths to work together and build something quite impressive. The Clearleft internship looks like a great opportunity for students, and it is paid.  &lt;/p&gt;
&lt;h2&gt;Peter Gasston - Understand when you can, fake it when you can’t&lt;/h2&gt;
&lt;p&gt;Peter covered a number of annoyances on the web and how developers should avoid making poor decisions which annoy users. &lt;/p&gt;
&lt;p&gt;It is easy to forget that we are building websites for people who aren’t like us. We need to have empathy for our users. So much can be learnt by watching other people use the web. We should not assume that we know what’s best for the user. &lt;/p&gt;
&lt;p&gt;Empathy is important when working with others. You can be technically excellent but ultimately ineffective if you cannot communicate well. The nature of development has really changed over the last few years: Developers need to work with designers, business people and users to create good websites, so having empathy is key.  &lt;/p&gt;
&lt;h2&gt;Panel Q&amp;#x26;A - Session&lt;/h2&gt;
&lt;p&gt;Some of the speakers gathered to answer our questions and to give advice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Specialise—do one thing really well, turn away low value work that will not add to your portfolio and will likely keep you trapped in similar work.&lt;/li&gt;
&lt;li&gt;Learn to say no, its very easy to get a huge workload so you need to turn things down.&lt;/li&gt;
&lt;li&gt;Don’t underestimate yourself and abilities based on number of followers etc.&lt;/li&gt;
&lt;li&gt;Cover letter advice: Proof read for typos, only keep relevant jobs in there, avoid mentioning tools (especially Word and Excel!), don’t include bar graphs with varying levels of skill.&lt;/li&gt;
&lt;li&gt;CV: keep it small—preferably 1/2 sides.&lt;/li&gt;
&lt;li&gt;Create a great portfolio, this is more important than a CV.&lt;/li&gt;
&lt;li&gt;A prospective employer wants to see how you think and how you code. Give examples of your work and contribute to projects on Github.&lt;/li&gt;
&lt;li&gt;You aren’t being employed for the person you are now but for the person you will become.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Show and Hide files on OSX easily]]></title><description><![CDATA[One gripe I have had with OSX is that it seemed unnecessarily difficult to view hidden files. Luckily I found Ian Lunn’s article: Quickly…]]></description><link>https://philbaker.dev/blog/show-hide-files-osx/</link><guid isPermaLink="false">https://philbaker.dev/blog/show-hide-files-osx/</guid><pubDate>Sun, 16 Mar 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;One gripe I have had with OSX is that it seemed unnecessarily difficult to view hidden files. Luckily I found Ian Lunn’s article: &lt;a href=&quot;http://ianlunn.co.uk/articles/quickly-showhide-hidden-files-mac-os-x-mavericks/&quot;&gt;Quickly Show/Hide Hidden Files on Mac OS X Mavericks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is worth spending a minute setting up a terminal alias. Now showing or hiding files is as simple as entering ‘showFiles’ or ‘hideFiles’ in the terminal. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Custom 404 pages with WordPress]]></title><description><![CDATA[I recently worked on a project which required its own 404 page for branding purposes. I created a htaccess file in my project directory and…]]></description><link>https://philbaker.dev/blog/custom-404-pages-wordpress/</link><guid isPermaLink="false">https://philbaker.dev/blog/custom-404-pages-wordpress/</guid><pubDate>Sat, 15 Mar 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I recently worked on a project which required its own 404 page for branding purposes. I created a htaccess file in my project directory and pointed it to my custom 404 page, but it didn’t work. &lt;/p&gt;
&lt;p&gt;It turns out that Wordpress was rewriting the URL and sending the user back to the 404 page at site root. After a lot of head scratching and searching I found a simple solution. I added the following to my htaccess file and everything worked as expected:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;# disable the rewrite engine
RewriteEngine off&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[CSS class naming and BEM - Contemporary practice]]></title><description><![CDATA[Web standards When discussing CSS naming conventions today it is worth taking a step back and looking at the history of CSS and web…]]></description><link>https://philbaker.dev/blog/css-class-naming-and-bem-contemporary-practice/</link><guid isPermaLink="false">https://philbaker.dev/blog/css-class-naming-and-bem-contemporary-practice/</guid><pubDate>Tue, 18 Feb 2014 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Web standards&lt;/h2&gt;
&lt;p&gt;When discussing CSS naming conventions today it is worth taking a step back and looking at the history of CSS and web standards. Version one of CSS was released in 1996 but it wasn’t until the late 90s and early 2000s that it became widely used.&lt;/p&gt;
&lt;p&gt;The acceptance of CSS was largely due to the efforts of the Web Standards movement, which promoted the separation of structure and presentation on the web.&lt;/p&gt;
&lt;p&gt;In 2003 the CSS Zen Garden was launched. The principle behind the site was to allow designers to submit their own style sheets without touching the HTML. Some of the submissions were beautiful and the wide array of designs showcased the power of CSS and inspired further adoption of it.&lt;/p&gt;
&lt;h2&gt;Best practices&lt;/h2&gt;
&lt;p&gt;The Zen Garden helped to form some of our early best practices around CSS, many of which are still accepted today. The bar had been set high and keeping markup and style sheets separate at all costs became a worthy goal.&lt;/p&gt;
&lt;p&gt;A good example of this attitude is a tweet from Andy Clarke in 2011. He stated “Every time you need to add a class or id for a style hook, put a pound/dollar in a jar.” It is worth noting that these best practices are not rules handed down from an authority, they simply emerged from the collaboration of web designers and developers and are subject to change.&lt;/p&gt;
&lt;h2&gt;Challenging best practices&lt;/h2&gt;
&lt;p&gt;These best practices were identified and criticised by Nicole Sullivan in her 2011 blog post ’Our (CSS) best practices are killing us.’ The main offenders were: 1) Avoiding the use of classes in HTML, 2) Avoiding non-semantic elements or classes in HTML and 3) using descendent selectors exclusively.&lt;/p&gt;
&lt;p&gt;Avoiding classes in HTML and making the CSS do the work with descendent selectors actually couples the CSS to the HTML structure. Imagine you have an h2 in the header of your document that is styled using the selector &lt;code class=&quot;language-text&quot;&gt;.header h2 { rules; }&lt;/code&gt;. If the h2 becomes an h3 or is moved to a different part of the site it will lose its styling - the CSS relies on the HTML structure to style the element. If you wanted to keep the styling the same you would now have to edit the CSS. Alternatively you could use a class name like &lt;code class=&quot;language-text&quot;&gt;&amp;lt;h2 class=&amp;quot;beta&amp;quot;&amp;gt;Heading&amp;lt;/h2&amp;gt;&lt;/code&gt;, now if the heading level or location changes the styling will remain the same.&lt;/p&gt;
&lt;p&gt;The drawback of this is that there will be more classes added to the markup but it is worth remembering who you are writing markup for. Users and clients generally aren’t interested in your markup (ever viewed source for google?), and after compression the performance hit of more class names is negligible. While there are good intentions behind our best practices it is sometimes necessary to take a pragmatic approach and challenge assumptions.&lt;/p&gt;
&lt;h2&gt;Maintainability&lt;/h2&gt;
&lt;p&gt;Maintainability is another key issue in this debate. A style sheet for the CSS Zen Garden code can be written by one person once and never checked again. A small blog can be coded once and left. Large scale sites like Facebook, the Guardian and the BBC are being worked on constantly by hundreds of developers. Their content, users and developers are constantly changing and sites must remain performant and available at all times. A sensible code base which can be understood by many developers is suddenly crucial to business goals. In this situation working with complex CSS selectors can be time consuming and may create specificity problems. A change in the CSS file may break something on another site. These websites need to be built quickly but also be maintainable and scalable.&lt;/p&gt;
&lt;h2&gt;The solution(s)&lt;/h2&gt;
&lt;p&gt;To combat these issues developers started to apply programmatic principles to the management of CSS, they started to think more about the structure of their code outside of the curly braces.&lt;/p&gt;
&lt;h3&gt;OOCSS&lt;/h3&gt;
&lt;p&gt;Nicole Sullivan’s OOCSS emphasises efficiency (DRY, reusability etc) through a modular approach to writing CSS. These principles have been used to clean up large code bases. Nicole’s work with Facebook illustrated how OOCSS can improve site performance. The introduction of the media object to Facebook reduced their code significantly.&lt;/p&gt;
&lt;h3&gt;SMACSS&lt;/h3&gt;
&lt;p&gt;Jonathan Snook wrote Scalable and Modular Architecture for CSS (SMACSS) based on the work he and his team did at Yahoo. The book is a set of guiding principles, a kind of style guide for writing CSS. He advocates the division of CSS into five categories: Base, Layout, Module, State and Theme. There are some basic naming conventions which allow developers to identify rules from each category.&lt;/p&gt;
&lt;h3&gt;BEM:&lt;/h3&gt;
&lt;p&gt;BEM or Block Element Modifier is a naming methodology created by Yandex, the biggest Russian search engine. They wanted a way of building long lasting sites quickly and in a way that allowed for code reuse across projects. The company has hundreds of developers so having a strict, informative naming convention was ideal.&lt;/p&gt;
&lt;p&gt;The syntax is as follows: blocks are denoted by a regular class name e.g. .site-search. Elements are denoted by a double underscore e.g. &lt;code class=&quot;language-text&quot;&gt;.site-search__field&lt;/code&gt;, and Modifiers are denoted by a double hyphen. E.g. &lt;code class=&quot;language-text&quot;&gt;.site-search__field--themed.&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Blocks&lt;/h3&gt;
&lt;p&gt;A block is a self contained part of a website. An example would be a search box, log in form or navigation . They tend to be common patterns that appear on most websites.&lt;/p&gt;
&lt;h3&gt;Elements&lt;/h3&gt;
&lt;p&gt;Blocks are made up of elements. The site search block consists of an input field and a search button. Using BEM we would code this as follows (I have made a codepen for more clarity: &lt;a href=&quot;http://codepen.io/philbaker/pen/Ccoag&quot;&gt;http://codepen.io/philbaker/pen/Ccoag&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;form&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;site-search&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;site-search__field&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;site-search__button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;submit&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;search&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.site-search&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 225px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token selector&quot;&gt;.site-search__button&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #897a6f&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #fff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At first this code looks verbose and a little weird but think about it in the context of a large project with multiple developers. If we wanted to make a change to the search button we could immediately identify it in the CSS and be confident that our change would not affect other buttons on the site.&lt;/p&gt;
&lt;h3&gt;Modifiers&lt;/h3&gt;
&lt;p&gt;Modifiers can be used to change the appearance of a block or element. A good example would be switching a logo during Christmas or adding a background colour to our search block. Using BEM it is easy to see that our search block can be modified simply by adding a class:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;form&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;site-search site-search--themed&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;site-search__field&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;site-search__button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Submit&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Search&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.site-search--themed&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #ddd5c9&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 25px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Should I use BEM?&lt;/h2&gt;
&lt;p&gt;The need for BEM really depends on your context. It can be used on small sites and personal projects, but there are clear advantages to using it on large sites with large teams. If you haven’t tried using BEM I think it is worth trying it on a project. Some people use a modified BEM syntax, so you can adapt it to you preferences. The syntax of BEM is very useful, but I think the true value in using it is the more modular approach to CSS that it encourages.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Some of the best practices that emerged from the web standards movement were problematic when applied to large sites. A number of developers reacted by creating frameworks and methodologies for writing CSS, borrowing ideas from programming languages. There is still debate about the merits of each approach but it is interesting to see how far our use of CSS has developed. Ultimately you should use the most suitable tool for the job.&lt;/p&gt;
&lt;h2&gt;More information&lt;/h2&gt;
&lt;p&gt;I have only scratched the surface of CSS naming and BEM in this blog post. There are lots of great resources which provide a deeper look at these topics. I particularly recommend Andy Budd’s talk and anything from Nicole Sullivan and Harry Roberts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BEM home page &lt;a href=&quot;http://bem.info/&quot;&gt;bem.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Andy Hume - &lt;a href=&quot;https://www.youtube.com/watch?v=ZpFdyfs03Ug&quot;&gt;CSS for grownups &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Thomas Bradley - &lt;a href=&quot;https://www.youtube.com/watch?v=TmxQ_jEcpk0&quot;&gt;Modules: modified BEM naming convention&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jeffrey Way - &lt;a href=&quot;https://www.youtube.com/watch?v=WH4U4K5W8N8&quot;&gt;Writing modular CSS with Sass and BEM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nicole Sullivan - &lt;a href=&quot;http://www.stubbornella.org/content/2011/04/28/our-best-practices-are-killing-us/&quot;&gt;Our best practices are killing us&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Varya Stepanova -  &lt;a href=&quot;https://www.youtube.com/watch?v=AIwJhTJD-rk&quot;&gt;What is BEM?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Harry Roberts - &lt;a href=&quot;http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/&quot;&gt;Mind BEMding: Getting your head ‘round BEM syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nicolas Gallagher - &lt;a href=&quot;http://nicolasgallagher.com/about-html-semantics-front-end-architecture/&quot;&gt;About HTML semantics and front-end architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scalable and Modular Architecture for CSS &lt;a href=&quot;http://smacss.com/&quot;&gt;SMACSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Object Oriented CSS &lt;a href=&quot;https://github.com/stubbornella/oocss/tree/master/oocss&quot;&gt;OOCSS at Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Handheld Conference]]></title><description><![CDATA[I had a great time in Cardiff for this year’s Handheld conference. The speakers were excellent and gave the right balance of inspiration and…]]></description><link>https://philbaker.dev/blog/handheld-conference/</link><guid isPermaLink="false">https://philbaker.dev/blog/handheld-conference/</guid><pubDate>Sat, 30 Nov 2013 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I had a great time in Cardiff for this year’s Handheld conference. The speakers were excellent and gave the right balance of inspiration and practical advice. Some themes emerged throughout the day: The challenges of responsive web design, workflow, good communication with clients and a love for SVG. Here are some notes I managed to peck into my phone:&lt;/p&gt;
&lt;h2&gt;Jeremy Keith: The long web&lt;/h2&gt;
&lt;p&gt;Jeremy walked us through his re-design of &lt;a href=&quot;http://thesession.org&quot;&gt;thesession.org&lt;/a&gt;. A collection of Irish music and one of the first websites he created. It was interesting to see how things have changed in web development since the 90s and how some principles are being re-embraced.&lt;/p&gt;
&lt;p&gt;The biggest challenge web designers face today is that we can no longer be sure which devices our site will be viewed on. This changes the way we should approach design and where we should start.&lt;/p&gt;
&lt;h3&gt;Something… first&lt;/h3&gt;
&lt;p&gt;Mobile first is good because it forces you to prioritise. &lt;/p&gt;
&lt;p&gt;URL First: Creating readable, guessable and hackable URLs is a good starting point.&lt;/p&gt;
&lt;p&gt;Content first, navigation second. At smaller viewports The Session moves navigation to the bottom of the content and uses a simple anchor link at the top. &lt;/p&gt;
&lt;h3&gt;Progressive enhancement&lt;/h3&gt;
&lt;p&gt;The core experience of the site should be rooted in HTML and CSS rather than Javascript. Relying on Javascript means you have a single point of failure.&lt;/p&gt;
&lt;p&gt;Progressive enhancement deals with failures in technology you cannot predict, it isn’t just users with JS disabled who are affected. &lt;/p&gt;
&lt;h3&gt;Performance&lt;/h3&gt;
&lt;p&gt;Do not rely on code from a third-party service for the performance of your website. Instead use conditional loading. The Session displays images from Flickr when the viewport is wide enough and only and after all other content has loaded.&lt;/p&gt;
&lt;p&gt;HTML is the format of the long web because it is backwards compatible by design.&lt;/p&gt;
&lt;h4&gt;Resources:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://futurefriend.ly&quot;&gt;Futurefriend.ly&lt;/a&gt;: The best way to be future friendly is to be backwards compatible.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://opendevicelab.com&quot;&gt;Opedevicelab.com&lt;/a&gt;: Find a device lab near you.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Jon Hicks: Icon design&lt;/h2&gt;
&lt;p&gt;Since writing the Icon Handbook the biggest change to icons on the web has been the increased popularity of icon fonts.&lt;/p&gt;
&lt;p&gt;Sprites used to be popular but retina and competing high resolution displays have introduced a great deal of complexity. &lt;/p&gt;
&lt;p&gt;There a number of great free icon sets available online but they are not always available in the size you want, or in the right style.&lt;/p&gt;
&lt;h3&gt;Design tips&lt;/h3&gt;
&lt;p&gt;Jon designs most icons on a 16 pixel grid which makes things easier to scale up.&lt;/p&gt;
&lt;p&gt;It is always worth following conventions with icons e.g. using the house symbol for a home button. This is such an established convention that to go against it would be confusing to users.  &lt;/p&gt;
&lt;p&gt;A good way to discover existing conventions is to search tags on the Noun Project. &lt;/p&gt;
&lt;p&gt;Context is very important e.g. thumbs-up can be considered rude in some parts of the middle-east.&lt;/p&gt;
&lt;p&gt;Icons can become too simple, it is sometimes worth adding in some detail to provide clarity. E.g. handbag, weight and padlock icons become indistinguishable without detail.&lt;/p&gt;
&lt;h4&gt;Resources:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://pictos.cc/&quot;&gt;pictos.cc&lt;/a&gt;: Pictos Icon sets&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://icomoon.io/&quot;&gt;icomoon.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://thenounproject.com&quot;&gt;thenounproject.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Mark Boulton: The business of responsive web design&lt;/h2&gt;
&lt;p&gt;Another great workflow talk. Mark went into detail about his experience working with CERN and others.&lt;/p&gt;
&lt;h3&gt;Structured content&lt;/h3&gt;
&lt;p&gt;CERN had an interesting problem in that a wide range of people read their content. Usually this would result in a simplification of content but Physicists do not appreciate their work being dumbed down. The answer was to provide different versions of news for different sections of the public e.g. When the Higgs particle was discovered the general public could read a simple article describing the significance of the discovery, teachers and students could view a similar article with added educational resources and scientists could drill down into the data.&lt;/p&gt;
&lt;p&gt;RWD is forcing designers and developers to think about how content works far more than they used to. ‘Meta data is the new art direction.’&lt;/p&gt;
&lt;h3&gt;Process&lt;/h3&gt;
&lt;p&gt;The web design process used to be simple. Responsive web design has introduced complexity and requires involvement of clients throughout the whole process. Sometimes this openness scares clients, they aren’t used to seeing the ‘messiness’ of design.&lt;/p&gt;
&lt;p&gt;Use content as soon as you can, if there is a problem getting content from the client just make it up. This often prompts the client to act as they do not like to see mistakes.&lt;/p&gt;
&lt;p&gt;The process for designing the UCL website involved lots of low fidelity prototyping. This begs the question, ‘where is the design?’ There is no big reveal, rather the design comes together through constant iteration. This can be difficult for clients who are used to working in a more traditional way. &lt;/p&gt;
&lt;p&gt;The responsive design workflow is difficult at the moment because we are breaking new ground. &lt;/p&gt;
&lt;h2&gt;Brendan Dawes: Data visualisation&lt;/h2&gt;
&lt;p&gt;A brilliant talk by the self-professed Kim Kardashian of data visualisation. I think I was too busy laughing to take notes but I did get a few key points: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The job of the graphic designer is to take something complex or obscure and present it in a way that is accessible. E.g. &lt;a href=&quot;http://brendandawes.com/content/02-projects/jamesbondkills/jamesbondkills.jpg&quot;&gt;This image&lt;/a&gt; displaying the number of kills by James Bond in each movie. The data already existed but nobody saw it until it the graphic visualisation was created.&lt;/li&gt;
&lt;li&gt;Spend a day learning something new, it doesn’t matter if you never use it again but one day you may need it.&lt;/li&gt;
&lt;li&gt;Naivety is the gateway to curiosity and is often the best teacher.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Eddie Machado: Design and development of the Handheld website&lt;/h2&gt;
&lt;p&gt;This talk gave an insight into the development of the Handheld conference website. Most of the Sass things went above my head and some of the methods used (e.g. display:none to hide content for smaller viewports) probably go against best practices. Still, it was a good talk which outlined the tensions involved with building a ‘real-life’ responsive site under pressure. Here are some brief notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Give your clients homework, think of everything and anything you need before you begin designing.&lt;/li&gt;
&lt;li&gt;Get clients involved right from the beginning. Clients who aren’t involved from the start will ask the difficult questions later.&lt;/li&gt;
&lt;li&gt;During the initial design phase resist all urges to open your code editor. It really helps to do lots of sketches so ideas can be quickly dismissed. Sketch everything even if it is annoying.&lt;/li&gt;
&lt;li&gt;Make sure you share everything with the client. Never do the ‘big reveal.’&lt;/li&gt;
&lt;li&gt;Always review you skill-set, if you work with others decide who is going to do what based on abilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Resources:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://aarronwalter.com/design-personas/&quot;&gt;aarronwalter.com/design-personas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;sassme.arc90.com&quot;&gt;sassme.arc90.com&lt;/a&gt;: Useful for developing colour schemes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Andy Clarke: Communication and collaboration with clients&lt;/h2&gt;
&lt;p&gt;Another good talk about the business side of responsive web design. Andy talked about workflow and made the point that RWD is not just the job of Designers and Developers, clients need to be dealing with the problems too.&lt;/p&gt;
&lt;h3&gt;Wireframes&lt;/h3&gt;
&lt;p&gt;The problem with wireframes is they are often signed off too eary and constrain design if they are too prescriptive. Clients can spend so long looking at wireframes that the layout gets ingrained in their minds. Moving away from documentation to better communication is key.&lt;/p&gt;
&lt;h3&gt;Problems with the waterfall process&lt;/h3&gt;
&lt;p&gt;Static visuals are the currency of web design and we often end up relying on them too much. A lack of communication is a big problem in a waterfall process: We hide behind the visuals and let them do the talking for us. Without explaining our decisions the artifacts we create are open to interpretation.&lt;/p&gt;
&lt;p&gt;Much of the business process remains fixed to allow for billing at specific points. This prevents us from going back and making changes without incurring further charges. We need to come up with a workflow that allows open ended planning and quick reaction to changes.&lt;/p&gt;
&lt;h3&gt;Process tips&lt;/h3&gt;
&lt;p&gt;Feel free to use Photoshop etc to establish a design ‘atmosphere’ first but move quickly to code. You can go back into Photoshop and at any point of the design process.&lt;/p&gt;
&lt;p&gt;Never email a picture of a website to a client and just ask for feedback.&lt;/p&gt;
&lt;p&gt;Don’t wait for weeks and weeks for the big reveal, keep clients involved in every step of the process. Andy sets up a shared Dropbox with clients so they can see the work in progress. He also holds daily Skype calls to keep them involved.&lt;/p&gt;
&lt;p&gt;Set up a proper feedback loop, ask questions, ask for specific feedback. &lt;/p&gt;
&lt;h3&gt;How you can call your client an idiot without getting fired&lt;/h3&gt;
&lt;p&gt;The designer has been hired to solve a problem the client cannot solve with their time or skill-set. We are the specialist and can set rules about how constructive feedback is to be received.&lt;/p&gt;
&lt;p&gt;We need to control the discussion. Take the time to discuss the design approach behind the decisions you made. Clients love to learn about the design process.&lt;/p&gt;
&lt;p&gt;Use feedback workshops to know your client better. Try and make them face to face. Get to know the people you are working with.&lt;/p&gt;
&lt;p&gt;Leave feelings at the door. It is really only the work that matters. We want to have conversations where the client can be completely open and honest about the work we are doing.&lt;/p&gt;
&lt;h2&gt;Jeffrey Zeldman: 10 commandments of web design&lt;/h2&gt;
&lt;h3&gt;Thou shalt entertain&lt;/h3&gt;
&lt;p&gt;Don’t forget to make websites fun. Panic software has a playful site with barely any copy, not something you would expect from a software company. Kevin Cornell’s art adds personality to technical articles on a list apart.&lt;/p&gt;
&lt;p&gt;Everyone should draw every day to express ideas. &lt;/p&gt;
&lt;p&gt;Humour is important but do not over-do it.&lt;/p&gt;
&lt;h3&gt;Test everything, including assumptions&lt;/h3&gt;
&lt;p&gt;Think strategically about devices and test on as many as possible.&lt;/p&gt;
&lt;p&gt;Test assumptions and challenge best practices if you feel it is necessary e.g. on the recent re-design of a list apart they left alt tags empty for images of authors in bios because their name is already in the headline. &lt;/p&gt;
&lt;h3&gt;Thou shalt iterate&lt;/h3&gt;
&lt;p&gt;Keep making incremental changes and a design will eventually come together. On the web iteration never sleeps. Pave the cow paths and make tiny changes to make things better.&lt;/p&gt;
&lt;p&gt;Milton Glazer on his design process: I move things around until they look right.&lt;/p&gt;
&lt;h3&gt;Thou shalt ship&lt;/h3&gt;
&lt;p&gt;Do not try and achieve perfection in your work as you will never deliver on time. &lt;/p&gt;
&lt;h3&gt;Engage thy community&lt;/h3&gt;
&lt;p&gt;Instagram lost a lot of users and alienated their biggest supporters by changing their terms of service.&lt;/p&gt;
&lt;h3&gt;Thou shalt prioritise&lt;/h3&gt;
&lt;p&gt;Ensure you are focusing on the most important things otherwise you will not deliver on time.&lt;/p&gt;
&lt;h3&gt;Love thy user as thyself&lt;/h3&gt;
&lt;p&gt;Do not make assumptions about what people want from a site based on the device they use.&lt;/p&gt;
&lt;h3&gt;Ignore workflow at thy peril&lt;/h3&gt;
&lt;p&gt;Instagram became popular because they uploaded images in the background making the process feel magical. The app had a lot of flaws but people used it because it got the main workflow spot-on.&lt;/p&gt;
&lt;h3&gt;Remember content&lt;/h3&gt;
&lt;p&gt;Design around the content rather than for specific devices.&lt;/p&gt;
&lt;h3&gt;To thine own self be true&lt;/h3&gt;
&lt;p&gt;The old hay.net site began as a very simple, functional website but introduced a great deal of complexity by imitating other government websites. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[FEL One Day - Structuring CSS]]></title><description><![CDATA[Ben Scott detailed his experience of working on the BBC Programmes site and his talk, like many of the others at Front End London centred on…]]></description><link>https://philbaker.dev/blog/fel-one-day-structuring-css/</link><guid isPermaLink="false">https://philbaker.dev/blog/fel-one-day-structuring-css/</guid><pubDate>Tue, 01 Oct 2013 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Ben Scott detailed his experience of working on the BBC Programmes site and his talk, like many of the others at Front End London centred on CSS Architecture.&lt;/p&gt;
&lt;p&gt;Ben outlined some of the problems with CSS when used on large scale sites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;People write new CSS for everything.&lt;/li&gt;
&lt;li&gt;Everything has a global scope.&lt;/li&gt;
&lt;li&gt;Easy for code to become bloated&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These problems are solved by building smaller, isolated parts for a site. The single responsibility principle is to do one thing and do it well. With this in mind CSS should be split down to components, macro-layout and theming.&lt;/p&gt;
&lt;p&gt;CSS components should like Lego bricks to allow them to be reused in a range of different scenarios.&lt;/p&gt;
&lt;p&gt;Ben’s recommended approach is for the code to be additive, to start simple and build in complexity. He advocated a mobile-first approach.&lt;/p&gt;
&lt;p&gt;Build bottom up: start with base styles, components and then pages. Brad Frost’s Atomic Design cited as a good example.&lt;/p&gt;
&lt;p&gt;The mobile first approach can be problematic with old versions of IE which do not recognise media queries and serve up a mobile site instead. Javascript should not be used to fix the problem due to performance issues and lack of fallback. Instead a pre-processor can be used to serve media queries to all browsers except old IE versions and a different style sheet can be served up to IE.&lt;/p&gt;
&lt;h2&gt;Resources:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://Reload.me.uk/talk-structuring-css&quot;&gt;Talk Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://GitHub.com/bpscott/breakup&quot;&gt;Conditional media query includes in Sass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bradfrostweb.com/blog/post/atomic-web-design/&quot;&gt;Brad Frost: Atomic Web Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Reasons to be creative 2013]]></title><description><![CDATA[I was lucky enough to attend reasons to be creative during the last three days. Having not been to any of the previous events I wasn’t sure…]]></description><link>https://philbaker.dev/blog/reasons-to-be-creative-2013/</link><guid isPermaLink="false">https://philbaker.dev/blog/reasons-to-be-creative-2013/</guid><pubDate>Thu, 05 Sep 2013 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I was lucky enough to attend reasons to be creative during the last three days. Having not been to any of the previous events I wasn’t sure what to expect. The conference was multi-track and I ended up seeing a number of talks. Here are a few highlights:&lt;/p&gt;
&lt;h2&gt;Eva-Lotta Lamm - Kickstarting your Sketching and Visual Thinking skills:&lt;/h2&gt;
&lt;p&gt;One of my favourite talks from the conference. Eva is an entertaining and engaging speaker. She took the audience through some simple sketches and helped me realise a little practice can  improve sketching greatly.&lt;/p&gt;
&lt;p&gt;My key takeaway was her story about trying new things. At first you have the initial excitement of learning something new, you start and enjoy your new hobby until you realise that you completely suck! This is where most people give up. If you stick with it the frustration will subside and things will become easier. Then you will get better.&lt;/p&gt;
&lt;h2&gt;Amit Pitaru - Learning Curves:&lt;/h2&gt;
&lt;p&gt;Amit went through his journey from musician to coder. He learnt to code so that he could use it artistically and after some time realised he knew enough to start building things.&lt;/p&gt;
&lt;p&gt;The theme throughout the talk was learning. The learning curve is not linear, in order to learn you have to make each step along the learning curve fun. Those people who know more than you make things look simple but in reality it takes a lot of patience and persistence to get good.&lt;/p&gt;
&lt;h2&gt;Aaron Gustafson - Designing with Empathy:&lt;/h2&gt;
&lt;p&gt;I was interested to see how Aaron would cover design as I had considered him more of a developer prior to the talk. He outlined a number of good points but the one that stood out was that design is not art, it is intended to communicate, it is not for showing off either.&lt;/p&gt;
&lt;h2&gt;Brad Frost - Death to Bullshit:&lt;/h2&gt;
&lt;p&gt;It felt a little wasteful to watch this talk again but I wanted to see it live! I’m glad I did. Brad went through the noise that we have to work through every day on the web. I have gotten used to pop-ups, terrible mobile experiences, distracting ads etc.&lt;/p&gt;
&lt;h2&gt;Royal Bandit - The word for work is play:&lt;/h2&gt;
&lt;p&gt;One of the great things about conferences is you get to hear from interesting people you have never heard of. Julien Valee Vallee and Eve Duhamel were endearing, they went through their different image and video productions for various companies and the funny stories along the way.&lt;/p&gt;
&lt;h2&gt;Elliot Jay Stocks - Where we are now, and from where have we come?&lt;/h2&gt;
&lt;p&gt;I was looking forward to this and Elliot gave a really good talk. He went through his career and how his work, and the web, has changed in the past decade. The highlight of the talk were his early websites e.g. Flash site for Atomic Kitten with auto-playing music.&lt;/p&gt;
&lt;h2&gt;Hellicar Lewis - White Cyclosa:&lt;/h2&gt;
&lt;p&gt;This was my favourite talk. Pete and Joel went through the digital experiences they create. Their work with autistic children made me realise how software can make a positive impact in people’s lives. Their general philosophy and approach to business is inspiring.&lt;/p&gt;
&lt;p&gt;All in all it was a great conference and I am excited about creating things!&lt;/p&gt;</content:encoded></item></channel></rss>